{"version":3,"sources":["components/FormField.js","components/EmailField.js","components/PasswordField.js","components/JoinForm.js","App.js","registerServiceWorker.js","index.js"],"names":["FormField","state","value","dirty","errors","hasChanged","e","preventDefault","props","label","required","validator","f","onStateChanged","target","isEmpty","length","requiredMissing","message","setState","this","type","fieldId","placeholder","children","hasErrors","controlClass","join","trim","className","htmlFor","id","onChange","Component","EmailField","restProps","validate","Error","PasswordField","stateChanged","password","strength","zxcvbn","score","validatePasswordStrong","thresholdLength","minStrength","Math","max","min","passwordLength","passwordStrong","passwordLong","counterClass","strengthClass","data-strength","JoinForm","fullname","email","fieldStateChanged","field","emailChanged","fullnameChanged","passwordChanged","formValidated","action","method","noValidate","test","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4TAyEeA,E,4MApEbC,MAAQ,CACNC,MAAO,GACPC,OAAO,EACPC,OAAQ,I,EAGVC,WAAa,SAAAC,GACXA,EAAEC,iBADc,MAI+D,EAAKC,MAA7EC,EAJS,EAITA,MAJS,IAIFC,gBAJE,aAIgBC,iBAJhB,MAI4B,SAAAC,GAAC,OAAIA,GAJjC,MAIoCC,sBAJpC,MAIqD,SAAAD,GAAC,OAAIA,GAJ1D,EAKVV,EAAQI,EAAEQ,OAAOZ,MACjBa,EAA2B,IAAjBb,EAAMc,OAChBC,EAAkB,EAAKhB,MAAME,OAASO,GAAYK,EAEpDX,EAAS,GAEb,GAAIa,EAEFb,EAAM,sBAAOA,GAAP,WAAkBK,EAAlB,uBACD,GAAI,oBAAsBE,EAC/B,IACEA,EAAUT,GACV,MAAOI,GAEPF,EAAM,sBAAOA,GAAP,CAAeE,EAAEY,UAK3B,EAAKC,UAAS,oBAAEhB,aAAF,eAAsB,CAACD,QAAOE,SAAQD,OAAQA,GAASA,MAAS,kBAAMU,EAAe,EAAKZ,W,uDAGhG,IAAD,EACwBmB,KAAKnB,MAA7BC,EADA,EACAA,MAAOC,EADP,EACOA,MAAOC,EADd,EACcA,OADd,EAE+CgB,KAAKZ,MAApDa,EAFA,EAEAA,KAAMZ,EAFN,EAEMA,MAAOa,EAFb,EAEaA,QAASC,EAFtB,EAEsBA,YAAaC,EAFnC,EAEmCA,SAEpCC,EAAYrB,EAAOY,OAAS,EAC5BU,EAAe,CAAC,eAAgBvB,EAAQsB,EAAY,aAAe,WAAa,IAAIE,KAAK,KAAKC,OAEpG,OACE,kBAAC,WAAD,KACE,yBAAKC,UAAU,wBACb,yBAAKA,UAAU,8DACb,2BAAOC,QAASR,EAASO,UAAU,iBAAiBpB,GAEnDgB,GAAa,yBAAKI,UAAU,wDAAwDzB,EAAO,KAG7FoB,EACD,2BAAOH,KAAMA,EAAMQ,UAAWH,EAAcK,GAAIT,EAASC,YAAaA,EAAarB,MAAOA,EAAO8B,SAAUZ,KAAKf,mB,GApDlG4B,a,eCyBTC,EAtBI,SAAA1B,GAEuBA,EAAjCa,KAAiCb,EAA3BG,UAFa,IAECwB,EAFD,YAEc3B,EAFd,sBAU1B,OAAO,kBAAC,EAAD,eAAWa,KAAK,OAAOV,UALR,SAAAT,GACpB,IAAKkC,mBAASlC,GAAQ,MAAM,IAAImC,MAAM,sBAIoBF,K,gBC6E/CG,E,kDAtFb,WAAY9B,GAAO,IAAD,uBAChB,cAAMA,IAqBR+B,aAAe,SAAAtC,GAGb,EAAKkB,SAAS,CACZqB,SAAUvC,EAAMC,MAChBuC,SAAUC,IAAOzC,EAAMC,OAAOyC,QAC7B,kBAAM,EAAKnC,MAAMK,eAAeZ,OA5BnB,EA+BlB2C,uBAAyB,SAAA1C,GAEvB,GAAIA,EAAMc,QAAU,EAAK6B,gBAAiB,MAAM,IAAIR,MAAM,qBAG1D,GAAIK,IAAOxC,GAAOyC,MAAQ,EAAKG,YAAa,MAAM,IAAIT,MAAM,qBApC5C,MAE+B7B,EAAxCsC,mBAFS,MAEK,EAFL,IAE+BtC,EAAvBqC,uBAFR,MAE0B,EAF1B,SAOhB,EAAKC,YAAqC,kBAAhBA,EACtBC,KAAKC,IAAID,KAAKE,IAAIH,EAAa,GAAI,GACnC,EAKJ,EAAKD,gBAA6C,kBAApBA,EAC1BE,KAAKC,IAAIH,EAAiB,GAC1B,EAGJ,EAAK5C,MAAQ,CAACuC,SAAU,GAAIC,SAAU,GAnBtB,E,qDAuCR,IAAD,EAC2DrB,KAAKZ,MAA/BgB,GADjC,EACAH,KADA,EACMV,UADN,EACiBE,eADjB,EACiCW,UAAaW,EAD9C,kEAEsBf,KAAKnB,MAA3BuC,EAFA,EAEAA,SAAUC,EAFV,EAEUA,SAEXS,EAAiBV,EAASxB,OAC1BmC,EAAiBV,GAAYrB,KAAK0B,YAClCM,EAAeF,EAAiB9B,KAAKyB,gBAGrCQ,EAAe,CAAC,mBAAoBD,EAAeD,EAAiB,gBAAkB,gBAAkB,gBAAgBxB,KAAK,KAAKC,OAGlI0B,EAAgB,CAAC,sBAAuBJ,EAAiB,EAAI,UAAY,aAAavB,KAAK,KAAKC,OAEtG,OACE,kBAAC,WAAD,KACE,yBAAKC,UAAU,qBAEb,kBAAC,EAAD,eAAWR,KAAK,WAAWV,UAAWS,KAAKwB,uBAAwB/B,eAAgBO,KAAKmB,cAAkBJ,GACxG,0BAAMN,UAAU,qBAAhB,gJACCL,EAED,yBAAKK,UAAWyB,GACd,yBAAKzB,UAAU,sBAAsB0B,gBAAed,MAGxD,yBAAKZ,UAAU,yCAEb,0BAAMA,UAAWwB,GAAeH,EAAiBE,EAAY,UAAMhC,KAAKyB,gBAAX,KAAgCK,EAAiB,W,GApE9FjB,aC+CbuB,E,4MA7CbvD,MAAQ,CAACwD,UAAU,EAAOC,OAAO,EAAOlB,UAAU,G,EAIlDmB,kBAAoB,SAAAC,GAAK,OAAI,SAAA3D,GAAK,OAAI,EAAKkB,SAAL,eAAgByC,EAAgC,IAAxB3D,EAAMG,OAAOY,W,EAE3E6C,aAAe,EAAKF,kBAAkB,S,EACtCG,gBAAkB,EAAKH,kBAAkB,Y,EACzCI,gBAAkB,EAAKJ,kBAAkB,Y,uDAEhC,IAAD,EAC8BvC,KAAKnB,MAAlCwD,EADD,EACCA,SAAUC,EADX,EACWA,MAAOlB,EADlB,EACkBA,SAClBwB,EAAgBP,GAAYC,GAASlB,EAS3C,OACE,yBAAKX,UAAU,8DACb,0BAAMoC,OAAO,IAAIC,OAAO,OAAOC,YAAU,GACvC,yBAAKtC,UAAU,wEACb,4BAAQA,UAAU,mBAAlB,gBAECmC,GAAiB,4BAAQ3C,KAAK,SAASQ,UAAU,4CAAhC,SAEpB,yBAAKA,UAAU,6CAEb,kBAAC,EAAD,CAAWR,KAAK,OAAOC,QAAQ,WAAWb,MAAM,WAAWc,YAAY,iBAAiBZ,UAfvE,SAAAT,GAEvB,IADc,6BACHkE,KAAKlE,GAAQ,MAAM,IAAImC,MAAM,wBAamFxB,eAAgBO,KAAK0C,gBAAiBpD,UAAQ,IAEnK,kBAAC,EAAD,CAAYY,QAAQ,QAAQb,MAAM,QAAQc,YAAY,sBAAsBV,eAAgBO,KAAKyC,aAAcnD,UAAQ,IAGvH,kBAAC,EAAD,CAAeY,QAAQ,WAAWb,MAAM,WAAWc,YAAY,iBAAiBV,eAAgBO,KAAK2C,gBAAiBlB,gBAAiB,EAAGC,YAAa,EAAGpC,UAAQ,W,GAtCvJuB,aCIRoC,G,MANH,kBACV,yBAAKxC,UAAU,mDACb,kBAAC,EAAD,SCIEyC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnF,QACf6E,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCxEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,2BAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,2BAAN,sBAEP3B,IAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCxCxBiC,K","file":"static/js/main.8d11a02b.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormField extends Component{\n  //initalize state\n  state = {\n    value: '',\n    dirty: false,\n    errors: []\n  }\n\n  hasChanged = e => {\n    e.preventDefault();\n\n    // destructure props - assign default dummy functions to validator and onStateChanged Props\n    const {label, required = false, validator = f => f, onStateChanged = f => f} = this.props;\n    const value = e.target.value;\n    const isEmpty = value.length === 0;\n    const requiredMissing = this.state.dirty && required && isEmpty;\n\n    let errors = [];\n\n    if (requiredMissing) {\n      // if required and is empty, add required error to state\n      errors = [...errors, `${label} is required`];\n    } else if ('function' === typeof validator) {\n      try {\n        validator(value);\n      } catch (e) {\n        // if validator throws error, add validation error to state\n        errors = [...errors, e.message];\n      }\n    }\n    // update state and call the onStateChanged callback fn after the update\n    // dirty is only changed to true and remains true on and after the first state update\n    this.setState(({dirty = false}) => ({value, errors, dirty: !dirty || dirty}), () => onStateChanged(this.state));\n  }\n\n  render() {\n    const {value, dirty, errors} = this.state;\n    const {type, label, fieldId, placeholder, children} = this.props;\n\n    const hasErrors = errors.length > 0;\n    const controlClass = ['form-control', dirty ? hasErrors ? 'is-invalid' : 'is-valid' : ''].join(' ').trim();\n\n    return (\n      <Fragment>\n        <div className=\"form-group px-3 pb-2\">\n          <div className=\"d-flex flex-row justify-content-between align-items-center\">\n            <label htmlFor={fieldId} className=\"control-label\">{label}</label>\n            {/**render the first error is there are any errors **/}\n            {hasErrors && <div className=\"error form-hint font-weight-bold text-right m-0 mb-2\">{errors[0]}</div>}\n          </div>\n          {/* Render the children nodes passed to component */}\n          {children}\n          <input type={type} className={controlClass} id={fieldId} placeholder={placeholder} value={value} onChange={this.hasChanged} />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nFormField.propTypes = {\n  type: PropTypes.oneOf([\"text\", \"password\"]).isRequired,\n  label: PropTypes.string.isRequired,\n  fieldId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  children: PropTypes.node,\n  validator: PropTypes.func,\n  onStateChanged: PropTypes.func\n};\n\nexport default FormField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {validate} from 'isemail-es5';\n\nimport FormField from './FormField';\n\nconst EmailField = props => {\n  // prevent passing type and validator props from this component too the rendered form field component.\n  const {type, validator, ...restProps} = props;\n\n  // validateEmail function using the validate() methos of the isemail package\n  const validateEmail = value => {\n    if (!validate(value)) throw new Error('Email is invalid');\n  };\n\n  // pass the validateEmail to the validator prop\n  return <FormField type=\"text\" validator={validateEmail} {...restProps} />\n};\n\nEmailField.propTypes = {\n  label: PropTypes.string.isRequired,\n  fieldId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  children: PropTypes.node,\n  onStateChanged: PropTypes.func\n}\n\nexport default EmailField;\n","import React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport zxcvbn from 'zxcvbn';\n\nimport FormField from './FormField';\n\nclass PasswordField extends Component{\n  constructor(props){\n    super(props);\n    const {minStrength = 3, thresholdLength = 7} = props;\n\n    // set default minStrength to 3 if not a number or not specified\n    // minStrength must be a number between 0 - 4\n\n    this.minStrength = typeof minStrength === 'number'\n      ? Math.max(Math.min(minStrength, 4), 0)\n      : 3;\n\n    // set default thresholdLength to 7 if not a number or not specified\n    // thresholdLength must be a minimum value of 7\n\n    this.thresholdLength = typeof thresholdLength === 'number'\n      ? Math.max(thresholdLength, 7)\n      : 7;\n\n    // initialize internal component state\n    this.state = {password: '', strength: 0};\n  }\n\n  stateChanged = state => {\n    // update the internal state using the updated state from the form field\n\n    this.setState({\n      password: state.value,\n      strength: zxcvbn(state.value).score\n    }, () => this.props.onStateChanged(state));\n  };\n\n  validatePasswordStrong = value => {\n    //ensure password is long enough\n    if (value.length <= this.thresholdLength) throw new Error(\"Password is short\");\n\n    // ensure password is strong enough using the zxcvbn library\n    if (zxcvbn(value).score < this.minStrength) throw new Error(\"Password is weak\");\n  };\n\n  render() {\n    const {type, validator, onStateChanged, children, ...restProps} = this.props;\n    const {password, strength} = this.state;\n\n    const passwordLength = password.length;\n    const passwordStrong = strength >= this.minStrength;\n    const passwordLong = passwordLength > this.thresholdLength;\n\n    // dynamically set the password length counter class\n    const counterClass = ['badge badge-pill', passwordLong ? passwordStrong ? 'badge-success' : 'badge-warning' : 'badge-danger'].join(' ').trim();\n\n    // password strength meter is only visible when password is not empty\n    const strengthClass = ['strength-meter mt-2', passwordLength > 0 ? 'visible' : 'invisible'].join(' ').trim();\n\n    return (\n      <Fragment>\n        <div className=\"position-relative\">\n          {/** Pass the validation and stateChanged functions ap props to the form field **/}\n          <FormField type=\"password\" validator={this.validatePasswordStrong} onStateChanged={this.stateChanged} {...restProps}>\n            <span className=\"d-block form-hint\">To confirm with our Strong Password policy, you are required to use a sufficiently strong password. Password must be more than 7 characters.</span>\n            {children}\n            {/** Render the password strength meter **/}\n            <div className={strengthClass}>\n              <div className=\"strength-meter-fill\" data-strength={strength}></div>\n            </div>\n          </FormField>\n          <div className=\"position-absolute password-count mx-3\">\n            {/** Render the password length counter indicator **/}\n            <span className={counterClass}>{passwordLength ? passwordLong ? `${this.thresholdLength}+` : passwordLength : ''}</span>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nPasswordField.propTypes = {\n  label: PropTypes.string.isRequired,\n  fieldId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  children: PropTypes.node,\n  onStateChanged: PropTypes.func,\n  minStrength: PropTypes.number,\n  thresholdLength: PropTypes.number\n};\n\nexport default PasswordField;\n","import React, {Component} from 'react';\n\nimport FormField from './FormField';\nimport EmailField from './EmailField';\nimport PasswordField from './PasswordField';\n\nclass JoinForm extends Component {\n  // initialize state to hold validity of form fields\n  state = {fullname: false, email: false, password: false}\n\n  // higher order function that returns a state change watch functions\n  // sets the corresponding state property to true if the form field has no errors\n  fieldStateChanged = field => state => this.setState({[field]: state.errors.length === 0});\n\n  emailChanged = this.fieldStateChanged('email');\n  fullnameChanged = this.fieldStateChanged('fullname');\n  passwordChanged = this.fieldStateChanged('password');\n\n  render(){\n    const {fullname, email, password} = this.state;\n    const formValidated = fullname && email && password;\n\n    // validation function for the fullname\n    // ensures that fullname contains at least two names separated with a space\n    const validateFullname = value => {\n      const regex = /^[a-z]{2,}(\\s[a-z]{2,})+$/i;\n      if (!regex.test(value)) throw new Error('Fullname is invalid');\n    };\n\n    return(\n      <div className=\"form-container d-table-cell position-relative align-middle\">\n        <form action=\"/\" method=\"POST\" noValidate>\n          <div className=\"d-flex flex-row justify-content-between align-items-center px-3 mb-5\">\n            <legend className=\"form-label mb-0\">Support Team</legend>\n            {/** Show the form button only if all the fields are valid **/}\n            {formValidated && <button type=\"button\" className=\"btn btn-primary text-uppercase px-3 py-2\">Join</button>}\n          </div>\n          <div className=\"py-5 border-gray border-top border-bottom\">\n            {/** Render the fullname form field passing the name validation fn **/}\n            <FormField type=\"text\" fieldId=\"fullname\" label=\"Fullname\" placeholder=\"Enter Fullname\" validator={validateFullname} onStateChanged={this.fullnameChanged} required />\n            {/** Render the email field component **/}\n            <EmailField fieldId=\"email\" label=\"Email\" placeholder=\"Enter Email Address\" onStateChanged={this.emailChanged} required />\n\n            {/** Render the password field component using thresholdLength of 7 and minStrength of 3 **/}\n            <PasswordField fieldId=\"password\" label=\"Password\" placeholder=\"Enter Password\" onStateChanged={this.passwordChanged} thresholdLength={7} minStrength={3} required />\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n}\n\nexport default JoinForm;\n","import React from 'react';\nimport JoinForm from './components/JoinForm';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"main-container d-table position-absolute m-auto\">\n    <JoinForm />\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}